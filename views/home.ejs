<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Safe Store</title>
    <link rel="stylesheet" href="/styling/global.css">
    <link rel="stylesheet" href="/styling/home.css">
    <script defer src="/scripts/modal.js"></script>
    <script defer src="/scripts/requests.js"></script>
</head>
<body>
    
    <header>
        <h3 class="page-heading">Safe Store</h3>
        <p>logged in as <span class="username"><%= user.email %></span></p>
    </header>

    <div class="home-main">
        <section class="passwords-view">
            <div class="no-search-result">no result found</div>
            <% if(user.accounts.length) {%>
                <% user.accounts.map(function(account) { %>
                    <div class="password-card">
                        <div class="password-card-initial">
                            <p> <%= account.accountName[0] %> </p>
                        </div>
                        <div class="password-card-details">
                            <p class="password-card-name"> <%= account.accountName %> </p>
                            <button class="password-card-btn">Password</button>
                            <%- include("modals/update-password-account-modal", { account: account }); %>
                        </div>
                    </div>
                <% }); %>
            <% } else {%>
                <div class="no-passwords-div">
                    <p class="no-passwords-text">No Passwords to be Shown</p>
                </div>
            <% } %>
        </section>
    
        <section class="operations-view">
            <div class="main-page-operations">
                <input type="text" class="operation-search" placeholder="search">
                <div class="operation-creation-div">
                    <button class="operation-create open-modal">Create</button>
                    <%- include("modals/create-password-account-modal"); %>
                </div>
                <div class="operation-deletion-div">
                    <button class="operation-delete">Delete</button>
                    <div class="delete-options">
                        <div class="delete-option-main">
                            <div class="delete-main-account">
                                <input type="radio" name="" id="">
                                <p>Main Account</p>
                            </div>
                            <hr class="delete-options-seperator"/>
                            <div class="delete-option-password">
                                <div class="delete-password-account">
                                    <p class="downwards-arrow">&darr;</p>
                                    <p>Password Account</p>
                                </div>
                                <div class="delete-password-accounts-list"></div>
                            </div>
                            <%- include("modals/delete-password-account-modal"); %>
                        </div>
                        <p class="delete-cancel">cancel</p>
                    </div>
                </div>
            </div>
            <a href="/api/logout/users" class="operation-log-out">log out</a>
        </section>
    </div>

<script>
    //value used for fetch request when performing API related operations
    const username = document.querySelector(".username").textContent.trim();

    const passwordsView = document.querySelector(".passwords-view");
    const [...accountPasswordCards] = document.querySelectorAll(".password-card");
    const [...accountPasswordCardNames] = document.querySelectorAll(".password-card-name");

    const openPasswordModal = document.querySelector(".open-modal");
    const createButton = document.querySelector(".create-password");

    let createPasswordForm = document.querySelector(".modal > form");
    
    let accountNameError = document.querySelector(".account-name-error");
    let accountUsernameError = document.querySelector(".email-error");
    let accountPasswordError = document.querySelector(".password-error");
    
    let resultModalText = document.querySelector(".result-text");

    //all the buttons within the resultModal
    const [...resultModalBtns] = document.querySelectorAll(".close-result-modal");


// section for password account modal //
    let [...passwordAccountForm] = document.querySelectorAll(".password-account-details > form");

    //save buttons within password account modal
    const [...savePasswordAccountBtns] = document.querySelectorAll(".open-password-result-modal");

    let [...passwordResultModalBtns] = document.querySelectorAll(".close-password-result-modal");
// end of section for password account modal //



// section for searching password accounts
    const searchInput = document.querySelector(".operation-search");    
    const noSearchResult = document.querySelector(".no-search-result");
// end of section for searching password accounts

// sections for deleting main or password accounts
    const deleteBtn = document.querySelector(".operation-delete");
    const deleteOptions = document.querySelector(".delete-options");
    let deleteResultText = document.querySelector(".delete-result-text");
    const deleteUserAccountSection = document.querySelector(".delete-main-account");
    const deletePasswordAccountSection = document.querySelector(".delete-option-password");
    let deletePasswordAccountsList = document.querySelector(".delete-password-accounts-list");

    // all of the buttons within the delete modal
    let allModalDeleteBtns = [
            document.querySelector(".delete-yes"), 
            document.querySelector(".delete-ok"), 
            document.querySelector(".delete-no")
        ];

    // the password card that's going to be deleted
    let PasswordCardToBeDeleted = "";
// end of section for delete main or password accounts

// cancel delete
    const cancelDelete = document.querySelector(".delete-cancel");
// end of cancel delete

// logout button
    const logOutBtn = document.querySelector(".operation-log-out");
// end of logout button


    
    //create password account functionality
    createButton.addEventListener("click", async function(event) {
        event.preventDefault();
    
        
        //reset error fields to nothing
        accountNameError.textContent = "";
        accountUsernameError.textContent = "";
        accountPasswordError.textContent = "";
        
        //default text within result modal
        resultModalText.textContent = "Loading...";
        
        //makes all result-modalbuttons display none
        activeClassRemoval();

        //getting form fields
        let accountName = createPasswordForm.account_name.value;
        let accountUsername = createPasswordForm.email.value;
        let accountPassword = createPasswordForm.password.value;

        if(!accountName) {
            accountNameError.textContent = "no account name provided";
            return;
        }
        if(!accountUsername) {
            accountUsernameError.textContent = "no email/username provided";
            return;
        }
        if(!accountPassword) {
            accountPasswordError.textContent = "no password provided";
            return;
        }

        let response = await createPasswordAccount(accountName, accountUsername, accountPassword);

        if(response.error) {
            if(response.error.includes("account already exists, update instead?")) {
                resultModalText.textContent = "account already exists, update instead?";
                resultModalBtns[0].classList.add("active");
                resultModalBtns[2].classList.add("active");
            }
        } else if(response) {
            resultModalText.textContent = "success!";
            resultModalBtns[1].classList.add("active");
        }

        //reload page when password account is created and user clicks "ok"
        resultModalBtns[1].addEventListener("click", pageRefresh);
    });

    
    //update the password account when the result-yes button is clicked
    resultModalBtns[0].addEventListener("click", async function() {
        //default text within result modal
        resultModalText.textContent = "Loading...";

        //makes all result-modalbuttons display none
        activeClassRemoval();

        let accountName = createPasswordForm.account_name.value;
        let accountUsername = createPasswordForm.email.value;
        let accountPassword = createPasswordForm.password.value;
        
        let response = await updatePasswordAccount(accountName, accountUsername, accountPassword);

        if(response.error) {
            resultModalText.textContent = response.error;
        } else if(response){
            resultModalText.textContent = "update success!";
            resultModalBtns[1].classList.add("active");;
        }
    });

    //save updated password account on password account modal when save button is clicked
    savePasswordAccountBtns.map(function(item, index) {
        let passwordResultText = document.querySelectorAll(".password-result-text");        

        item.addEventListener("click", function() {
            passwordResultText[index].textContent = "Loading...";
            passwordResultModalBtns[index].addEventListener("click", function() { location.assign("/"); });

            let accountName = document.querySelectorAll(".fullname")[index].textContent.trim();
            let accountUsername = passwordAccountForm[index].username.value;
            let accountPassword = passwordAccountForm[index].password.value;

            let response = updatePasswordAccount(accountName, accountUsername, accountPassword);

            if(data.error) {
                passwordResultText[index].textContent = data.error;
            } else if(response) {
                passwordResultText[index].textContent = "update success!";
                passwordResultModalBtns[index].classList.add("active");
            }
        });
    });


    
    // search for password accounts based on user input
    searchInput.addEventListener("keyup", function() {
        //removes the active class so the no search result text won't show
        noSearchResult.classList.remove("active");

        accountPasswordCards.map(function(item) {
            item.classList.remove("hide");
        });

        let accountName = searchInput.value;

        let match = accountName.match(/\s*/);
        let regexp = new RegExp(`^${ accountName }.*`, "i");

        if(match[0] !== accountName) {
            let result = accountPasswordCards.filter(function(item, index) {
                if(!regexp.test(accountPasswordCardNames[index].textContent.trim())) {
                    return accountPasswordCards[index];
                }
            }).map(function(item) {
                item.classList.add("hide");
            });
            if(result.length === accountPasswordCards.length) {
                noSearchResult.classList.add("active");
            }
        }
    });



    //delete button functionality
    deleteBtn.addEventListener("click", function() {
        openPasswordModal.classList.add("hide");
        logOutBtn.classList.add("hide");
        deleteOptions.classList.add("active");
    });


    // delete password accounts
    deletePasswordAccountSection.addEventListener("click", function() {
        // empties delete password account list
        deletePasswordAccountsList.textContent = ""

        // makes the delete buttons yes and no visible
        allModalDeleteBtns.map(function(item, index) {
            if(index !== 1) {
                item.classList.add("active");
            }
        });
        
        // gets all the password account names
        let [...allPasswordAccounts] = document.querySelectorAll(".fullname");

        // creates delete options for user to select from
        allPasswordAccounts.map(function(item) {
            let accountName = document.createElement("p");
            let horizontalLine = document.createElement("hr");

            accountName.textContent = item.textContent;

            accountName.classList.add("delete-account-name");

            deletePasswordAccountsList.appendChild(accountName);
            deletePasswordAccountsList.appendChild(horizontalLine);
        });

        let [...allDeletePasswordAccounts] = document.querySelectorAll(".delete-account-name");

        //provides form of assurance to user before deleting password account
        allDeletePasswordAccounts.map(function(item) {
            item.addEventListener("click", function() {
                PasswordCardToBeDeleted = item.textContent.trim();
                deleteResultText.textContent = `Delete ${ PasswordCardToBeDeleted }?`;
            });
        });

        //add delete password account functionality on the yes button
        allModalDeleteBtns[0].addEventListener("click", function() {
            if(deletePasswordAccount(PasswordCardToBeDeleted)) {
                deleteResultText.textContent = "Success!"
                allModalDeleteBtns[0].classList.remove("active");
                allModalDeleteBtns[2].classList.remove("active");

                allModalDeleteBtns[1].classList.add("active");
            }
        });

        //refreshes entire page when user clicks ok button
        allModalDeleteBtns[1].addEventListener("click", pageRefresh);
    });
    


    //delete user account functionality
    deleteUserAccountSection.addEventListener("click", function() {
        deleteResultText.textContent = "Delete User Account?";

        allModalDeleteBtns[0].classList.add("active");
        allModalDeleteBtns[2].classList.add("active");

        allModalDeleteBtns[1].classList.remove("active");

        allModalDeleteBtns[0].addEventListener("click", function() {
            if(deleteUserAccount(username)) {
                loginRedirect();
            }
        });
    });


    //cancel delete functionality
    cancelDelete.addEventListener("click", function() {
        openPasswordModal.classList.remove("hide");
        logOutBtn.classList.remove("hide");
        deleteOptions.classList.remove("active");
        deletePasswordAccountsList.textContent = "";
    });



    //refreshes the entire page
    function pageRefresh() {
        location.assign("/");
    }

    //redirects to login page
    function loginRedirect() {
        location.assign("/api/login");
    }

    //removal of active class from buttons so that it's reset when making new requests
    function activeClassRemoval() {
        resultModalBtns.map(function(item) {
            item.classList.remove("active");
        });
    }

</script>

<%- include("partials/footer") %>